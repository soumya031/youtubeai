
import { SummaryData, ApiError } from '../types';

export const extractYouTubeVideoId = (url: string): string | null => {
  if (!url) return null;
  // Regular expression to cover various YouTube URL formats
  const regExp = /^(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
  const match = url.match(regExp);
  return match ? match[1] : null;
};

const BACKEND_API_URL = '/api/summarize'; // This is no longer used for a real backend call

export const summarizeYouTubeVideo = async (videoUrl: string): Promise<SummaryData> => {
  // Simulate API call with a delay
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const videoId = extractYouTubeVideoId(videoUrl);

      if (!videoId) {
        reject({ message: 'Invalid YouTube URL. Please provide a valid video link. Example: https://www.youtube.com/watch?v=dQw4w9WgXcQ' } as ApiError);
        return;
      }

      // Simulate an error for a specific test URL if needed for UI testing
      if (videoUrl.includes("error_test_url")) {
        reject({ message: 'Mock API Error: Failed to process this video due to a simulated server problem.' } as ApiError);
        return;
      }
      
      let title = `Sample Video Title for ID: ${videoId}`;
      let summary = `This is a mock summary for the YouTube video with ID ${videoId}. In a real application, this summary would be generated by an AI model analyzing the video's transcript. This placeholder demonstrates how the summarized content would appear. It would typically be a few paragraphs long, highlighting key points and topics discussed in the video.`;

      // Predefined summaries for specific video IDs
      if (videoId === 'dQw4w9WgXcQ') {
        title = 'Rick Astley - Never Gonna Give You Up (Official Music Video)';
        summary = 'This iconic music video features Rick Astley performing his 1987 hit song "Never Gonna Give You Up." The video is characterized by its distinct 80s aesthetic, Astley\'s energetic dancing, and has become a cornerstone of internet culture through the "rickrolling" meme. The summary highlights its catchy tune and cultural significance.';
      } else if (videoId === 'jNQXAC9IVRw') { 
        title = 'Big Buck Bunny - Blender Foundation\'s Open Movie';
        summary = 'Big Buck Bunny is an animated short film by the Blender Foundation. It showcases the capabilities of the open-source 3D software Blender. The story follows a large, gentle rabbit who deals with annoying smaller creatures. This summary would focus on its technical achievements and simple, charming narrative.';
      } else if (videoId === 'OGgpyh4_jiE') { // Example: Gemini API overview
        title = 'Google I/O 2023: Gemini API Overview';
        summary = 'This video from Google I/O 2023 provides an overview of the Gemini API, showcasing its capabilities for multimodal understanding and generation. It discusses potential applications and how developers can leverage Gemini for innovative AI solutions. The summary would touch upon key features like text, image, and code processing.';
      }

      resolve({
        videoDetails: {
          id: videoId,
          title: title,
          thumbnailUrl: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`, // hqdefault for better quality
          videoUrl: `https://www.youtube.com/watch?v=${videoId}`
        },
        summary: summary,
      });
    }, 1500); // Simulate network delay
  });
};
